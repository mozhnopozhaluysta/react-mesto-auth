{"ast":null,"code":"// Cоздание класса Api описание работы логики, обращения к Api\nclass Api {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n    this._headers = options.headers;\n  }\n\n  // Формирование запроса на сервер, если не удачно, то возвращаем ошибку!\n  _handleSendingRequest(res) {\n    if (res.ok) {\n      return Promise.resolve(res.json());\n    }\n\n    // Если ошибка, отклоняем промис\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  // Метод загрузки информации о пользователе с сервера\n  async getRealUserInfo() {\n    const response = await fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers\n    });\n    return this._handleSendingRequest(response);\n  }\n\n  // Метод загрузки карточек с сервера\n  async getInitialCards() {\n    const response = await fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers\n    });\n    return this._handleSendingRequest(response);\n  }\n\n  // Метод редактирование профиля\n  async editProfileUserInfo(data) {\n    const response = await fetch(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      })\n    });\n    return this._handleSendingRequest(response);\n  }\n\n  // Метод добавления новой карточки с сервера\n  async addNewCard(data) {\n    const response = await fetch(`${this._baseUrl}/cards`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify(data)\n    });\n    return this._handleSendingRequest(response);\n  }\n\n  // Метод постановки лайка карточки\n  async addLike(cardId) {\n    const response = await fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n      method: \"PUT\",\n      headers: this._headers\n    });\n    return this._handleSendingRequest(response);\n  }\n\n  // Метод удаления карточки\n  async removeCard(cardId) {\n    const response = await fetch(`${this._baseUrl}/cards/${cardId}`, {\n      method: \"DELETE\",\n      headers: this._headers\n    });\n    return this._handleSendingRequest(response);\n  }\n\n  // Метод постановки и снятия лайка с карточки\n  async removeLike(cardId) {\n    const response = await fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n      method: \"DELETE\",\n      headers: this._headers\n    });\n    return this._handleSendingRequest(response);\n  }\n\n  // Метод обновления аватара пользователя\n  async updateProfileUserAvatar(data) {\n    const response = await fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    });\n    return this._handleSendingRequest(response);\n  }\n}\nconst api = new Api({\n  baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-62\",\n  headers: {\n    authorization: \"f70fd1ec-6366-4aff-9447-5f962e306222\",\n    \"Content-Type\": \"application/json\"\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","options","_baseUrl","baseUrl","_headers","headers","_handleSendingRequest","res","ok","Promise","resolve","json","reject","status","getRealUserInfo","response","fetch","getInitialCards","editProfileUserInfo","data","method","body","JSON","stringify","name","about","addNewCard","addLike","cardId","removeCard","removeLike","updateProfileUserAvatar","avatar","api","authorization"],"sources":["/Users/tomik/Desktop/dev/react-mesto-auth/src/utils/Api.js"],"sourcesContent":["// Cоздание класса Api описание работы логики, обращения к Api\nclass Api {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n    this._headers = options.headers;\n  }\n\n  // Формирование запроса на сервер, если не удачно, то возвращаем ошибку!\n  _handleSendingRequest(res) {\n    if (res.ok) {\n      return Promise.resolve(res.json());\n    }\n\n    // Если ошибка, отклоняем промис\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  // Метод загрузки информации о пользователе с сервера\n  async getRealUserInfo() {\n    const response = await fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers,\n    });\n    return this._handleSendingRequest(response);\n  }\n\n  // Метод загрузки карточек с сервера\n  async getInitialCards() {\n    const response = await fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers,\n    });\n    return this._handleSendingRequest(response);\n  }\n\n  // Метод редактирование профиля\n  async editProfileUserInfo(data) {\n    const response = await fetch(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about,\n      }),\n    });\n    return this._handleSendingRequest(response);\n  }\n\n  // Метод добавления новой карточки с сервера\n  async addNewCard(data) {\n    const response = await fetch(`${this._baseUrl}/cards`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify(data),\n    });\n    return this._handleSendingRequest(response);\n  }\n\n  // Метод постановки лайка карточки\n  async addLike(cardId) {\n    const response = await fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n      method: \"PUT\",\n      headers: this._headers,\n    });\n    return this._handleSendingRequest(response);\n  }\n\n  // Метод удаления карточки\n  async removeCard(cardId) {\n    const response = await fetch(`${this._baseUrl}/cards/${cardId}`, {\n      method: \"DELETE\",\n      headers: this._headers,\n    });\n    return this._handleSendingRequest(response);\n  }\n\n  // Метод постановки и снятия лайка с карточки\n  async removeLike(cardId) {\n    const response = await fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n      method: \"DELETE\",\n      headers: this._headers,\n    });\n    return this._handleSendingRequest(response);\n  }\n\n  // Метод обновления аватара пользователя\n  async updateProfileUserAvatar(data) {\n    const response = await fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.avatar,\n      }),\n    });\n    return this._handleSendingRequest(response);\n  }\n}\n\nconst api = new Api({\n  baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-62\",\n  headers: {\n    authorization: \"f70fd1ec-6366-4aff-9447-5f962e306222\",\n    \"Content-Type\": \"application/json\",\n  },\n});\n\nexport default api;\n"],"mappings":"AAAA;AACA,MAAMA,GAAG,CAAC;EACRC,WAAWA,CAACC,OAAO,EAAE;IACnB,IAAI,CAACC,QAAQ,GAAGD,OAAO,CAACE,OAAO;IAC/B,IAAI,CAACC,QAAQ,GAAGH,OAAO,CAACI,OAAO;EACjC;;EAEA;EACAC,qBAAqBA,CAACC,GAAG,EAAE;IACzB,IAAIA,GAAG,CAACC,EAAE,EAAE;MACV,OAAOC,OAAO,CAACC,OAAO,CAACH,GAAG,CAACI,IAAI,CAAC,CAAC,CAAC;IACpC;;IAEA;IACA,OAAOF,OAAO,CAACG,MAAM,CAAE,WAAUL,GAAG,CAACM,MAAO,EAAC,CAAC;EAChD;;EAEA;EACA,MAAMC,eAAeA,CAAA,EAAG;IACtB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,IAAI,CAACd,QAAS,WAAU,EAAE;MACxDG,OAAO,EAAE,IAAI,CAACD;IAChB,CAAC,CAAC;IACF,OAAO,IAAI,CAACE,qBAAqB,CAACS,QAAQ,CAAC;EAC7C;;EAEA;EACA,MAAME,eAAeA,CAAA,EAAG;IACtB,MAAMF,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,IAAI,CAACd,QAAS,QAAO,EAAE;MACrDG,OAAO,EAAE,IAAI,CAACD;IAChB,CAAC,CAAC;IACF,OAAO,IAAI,CAACE,qBAAqB,CAACS,QAAQ,CAAC;EAC7C;;EAEA;EACA,MAAMG,mBAAmBA,CAACC,IAAI,EAAE;IAC9B,MAAMJ,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,IAAI,CAACd,QAAS,WAAU,EAAE;MACxDkB,MAAM,EAAE,OAAO;MACff,OAAO,EAAE,IAAI,CAACD,QAAQ;MACtBiB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,IAAI,EAAEL,IAAI,CAACK,IAAI;QACfC,KAAK,EAAEN,IAAI,CAACM;MACd,CAAC;IACH,CAAC,CAAC;IACF,OAAO,IAAI,CAACnB,qBAAqB,CAACS,QAAQ,CAAC;EAC7C;;EAEA;EACA,MAAMW,UAAUA,CAACP,IAAI,EAAE;IACrB,MAAMJ,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,IAAI,CAACd,QAAS,QAAO,EAAE;MACrDkB,MAAM,EAAE,MAAM;MACdf,OAAO,EAAE,IAAI,CAACD,QAAQ;MACtBiB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,IAAI;IAC3B,CAAC,CAAC;IACF,OAAO,IAAI,CAACb,qBAAqB,CAACS,QAAQ,CAAC;EAC7C;;EAEA;EACA,MAAMY,OAAOA,CAACC,MAAM,EAAE;IACpB,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,IAAI,CAACd,QAAS,UAAS0B,MAAO,QAAO,EAAE;MACrER,MAAM,EAAE,KAAK;MACbf,OAAO,EAAE,IAAI,CAACD;IAChB,CAAC,CAAC;IACF,OAAO,IAAI,CAACE,qBAAqB,CAACS,QAAQ,CAAC;EAC7C;;EAEA;EACA,MAAMc,UAAUA,CAACD,MAAM,EAAE;IACvB,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,IAAI,CAACd,QAAS,UAAS0B,MAAO,EAAC,EAAE;MAC/DR,MAAM,EAAE,QAAQ;MAChBf,OAAO,EAAE,IAAI,CAACD;IAChB,CAAC,CAAC;IACF,OAAO,IAAI,CAACE,qBAAqB,CAACS,QAAQ,CAAC;EAC7C;;EAEA;EACA,MAAMe,UAAUA,CAACF,MAAM,EAAE;IACvB,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,IAAI,CAACd,QAAS,UAAS0B,MAAO,QAAO,EAAE;MACrER,MAAM,EAAE,QAAQ;MAChBf,OAAO,EAAE,IAAI,CAACD;IAChB,CAAC,CAAC;IACF,OAAO,IAAI,CAACE,qBAAqB,CAACS,QAAQ,CAAC;EAC7C;;EAEA;EACA,MAAMgB,uBAAuBA,CAACZ,IAAI,EAAE;IAClC,MAAMJ,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,IAAI,CAACd,QAAS,kBAAiB,EAAE;MAC/DkB,MAAM,EAAE,OAAO;MACff,OAAO,EAAE,IAAI,CAACD,QAAQ;MACtBiB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBS,MAAM,EAAEb,IAAI,CAACa;MACf,CAAC;IACH,CAAC,CAAC;IACF,OAAO,IAAI,CAAC1B,qBAAqB,CAACS,QAAQ,CAAC;EAC7C;AACF;AAEA,MAAMkB,GAAG,GAAG,IAAIlC,GAAG,CAAC;EAClBI,OAAO,EAAE,6CAA6C;EACtDE,OAAO,EAAE;IACP6B,aAAa,EAAE,sCAAsC;IACrD,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEF,eAAeD,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}